name: Docker Build & Security

on:
  push:
    branches: [ dev, staging, prod ]
  pull_request:
    branches: [ dev, staging, prod ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_FRONTEND: censeo-frontend
  IMAGE_NAME_BACKEND: censeo-backend

jobs:
  build-and-scan:
    name: Build & Scan Docker Images
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      security-events: write

    strategy:
      matrix:
        service: [frontend, backend]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.service == 'frontend' && env.IMAGE_NAME_FRONTEND || env.IMAGE_NAME_BACKEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service }}
          file: ${{ matrix.service }}/Dockerfile.dev
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true

      - name: Run Trivy vulnerability scanner on image
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: ${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          format: 'sarif'
          output: 'trivy-${{ matrix.service }}-results.sarif'

      - name: Check if SARIF file exists
        continue-on-error: true
        run: |
          if [ -f "trivy-${{ matrix.service }}-results.sarif" ]; then
            echo "✅ SARIF file exists"
            ls -la trivy-${{ matrix.service }}-results.sarif
          else
            echo "❌ SARIF file not found, skipping upload"
            ls -la
          fi

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('trivy-${{ matrix.service }}-results.sarif') != ''
        with:
          sarif_file: 'trivy-${{ matrix.service }}-results.sarif'

      - name: Test container functionality
        run: |
          if [ "${{ matrix.service }}" = "frontend" ]; then
            docker run --rm ${{ fromJSON(steps.meta.outputs.json).tags[0] }} npm test -- --watchAll=false --ci
          else
            docker run --rm ${{ fromJSON(steps.meta.outputs.json).tags[0] }} python manage.py check
          fi

      - name: Push Docker image
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service }}
          file: ${{ matrix.service }}/Dockerfile.dev
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  docker-compose-test:
    name: Docker Compose Integration Test
    runs-on: ubuntu-latest
    needs: build-and-scan

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test Docker Compose setup
        run: |
          docker compose -f docker-compose.yml up -d --build
          sleep 30

          # Test backend health
          docker compose exec -T backend python manage.py check

          # Test that services are running
          curl -f http://localhost:8000/api/health/ || exit 1
          curl -f http://localhost:3000 || exit 1

          echo "✅ Docker Compose integration test passed"

      - name: Cleanup
        if: always()
        run: docker compose down -v