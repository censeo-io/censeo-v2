name: Code Quality & Analysis

on:
  push:
    branches: [ dev, staging, prod ]
  pull_request:
    branches: [ dev, staging, prod ]
  workflow_dispatch:

jobs:
  codeql:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 360

    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'python' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended

      - name: Setup Node.js (for JavaScript analysis)
        if: matrix.language == 'javascript'
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Build frontend (for JavaScript analysis)
        if: matrix.language == 'javascript'
        run: |
          cd frontend
          npm ci --legacy-peer-deps
          npm run build

      - name: Setup Python (for Python analysis)
        if: matrix.language == 'python'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install Python dependencies (for Python analysis)
        if: matrix.language == 'python'
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    if: github.repository_owner == 'censeo-io' && vars.ENABLE_SONARCLOUD == 'true' # Only run when enabled and on main org repos

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci --legacy-peer-deps

      - name: Install backend dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run frontend tests with coverage
        run: |
          cd frontend
          npm test -- --coverage --watchAll=false --ci

      - name: Run backend tests with coverage
        run: |
          cd backend
          python -m pytest --cov=. --cov-report=xml
        env:
          DATABASE_ENGINE: django.db.backends.sqlite3
          DATABASE_NAME: ":memory:"

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: moderate
          allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC, LGPL-3.0, AGPL-3.0
          deny-packages: ""
          vulnerability-check: true
          license-check: true
          config-file: ""

  performance-lighthouse:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Build application
        run: npm run build

      - name: Serve app and run Lighthouse
        run: |
          npx serve -s build -p 3000 &
          sleep 5
          npx lighthouse http://localhost:3000 --output=json --output-path=lighthouse-report.json --chrome-flags="--headless --no-sandbox" --quiet

      - name: Upload Lighthouse report
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-report
          path: frontend/lighthouse-report.json
          retention-days: 30