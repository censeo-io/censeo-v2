[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "censeo-backend"
version = "0.1.0"
description = "Censeo Backend API"
authors = [{name = "Censeo Team"}]
readme = "README.md"
requires-python = ">=3.10"

[tool.ruff]
# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.10
target-version = "py310"

[tool.ruff.lint]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # Pyflakes
    "I",  # isort
    "N",  # pep8-naming
    "D",  # pydocstyle
    "UP", # pyupgrade
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "DJ", # flake8-django
    "PIE", # flake8-pie
    "T20", # flake8-print
    "RUF", # Ruff-specific rules
]

ignore = [
    # Django-specific patterns
    "F403", # Star imports (common in Django settings)
    "F405", # Undefined names from star imports (common in Django settings)
    "B008", # Do not perform function calls in argument defaults (Django patterns)
    "RUF012", # Mutable class attributes (Django Meta classes)
    # Docstring rules - can be enabled gradually for code quality
    "D100", "D101", "D102", "D104", "D105", "D106", # Missing docstrings
    "D200", "D205", "D415", # Docstring formatting
    # Line length (handled by formatter, some Django names are long)
    "E501",
    # Test quality improvements (can fix separately)
    "B017", # assertRaises(Exception) too broad
]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.isort]
known-third-party = ["django", "rest_framework", "corsheaders"]
known-first-party = ["core", "censeo"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "censeo.settings.development"
python_files = ["tests.py", "test_*.py", "*_tests.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-report=html",
]
testpaths = ["core", "censeo"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["."]
omit = [
    "*/migrations/*",
    "*/venv/*",
    "*/env/*",
    "manage.py",
    "*/settings/*",
    "*/tests/*",
    "*/__pycache__/*",
    "*/staticfiles/*",
    "*/media/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]